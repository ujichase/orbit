//
//  Copyright (C) 2022-2025  Chase Ruskin
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

use crate::core::lang::highlight;
use crate::core::lang::highlight::ToColor;
use colored::ColoredString;
use std::fmt::Display;

// There are 124 keywords in the Verilog-2005 LRM, with 'unsigned' reserved for future use.

#[derive(Debug, PartialEq, Clone)]
pub enum Keyword {
    Always,
    And,
    Assign,
    Automatic,
    Begin,
    Buf,
    Bufif0,
    Bufif1,
    Case,
    Casex,
    Casez,
    Cell,
    Cmos,
    Config,
    Deassign,
    Default,
    Defparam,
    Design,
    Disable,
    Edge,
    Else,
    End,
    Endcase,
    Endconfig,
    Endfunction,
    Endgenerate,
    Endmodule,
    Endprimitive,
    Endspecify,
    Endtable,
    Endtask,
    Event,
    For,
    Force,
    Forever,
    Fork,
    Function,
    Generate,
    Genvar,
    Highz0,
    Highz1,
    If,
    Ifnone,
    Incdir,
    Include,
    Initial,
    Inout,
    Input,
    Instance,
    Integer,
    Join,
    Large,
    Liblist,
    Library,
    Localparam,
    Macromodule,
    Medium,
    Module,
    Nand,
    Negedge,
    Nmos,
    Nor,
    Noshowcancelled,
    Not,
    Notif0,
    Notif1,
    Or,
    Output,
    Parameter,
    Pmos,
    Posedge,
    Primitive,
    Pull0,
    Pull1,
    Pulldown,
    Pullup,
    PulsestyleOnevent,
    PulsestyleOndetect,
    Rcmos,
    Real,
    Realtime,
    Reg,
    Release,
    Repeat,
    Rnmos,
    Rpmos,
    Rtran,
    Rtranif0,
    Rrtranif1,
    Scalared,
    Showcancelled,
    Signed,
    Small,
    Specify,
    Specparam,
    Strong0,
    Strong1,
    Supply0,
    Supply1,
    Table,
    Task,
    Time,
    Tran,
    Tranif0,
    Tranif1,
    Tri,
    Tri0,
    Tri1,
    Triand,
    Trior,
    Trireg,
    Unsigned,
    Use,
    Uwire,
    Vectored,
    Wait,
    Wand,
    Weak0,
    Weak1,
    While,
    Wire,
    Wor,
    Xnor,
    Xor,
}

impl Keyword {
    /// Attempts to match the given string of characters `s` to a Verilog keyword.
    ///
    /// Compares `s` against keywords using ascii comparison (case-sensitive).
    pub fn match_keyword(s: &str) -> Option<Self> {
        Some(match s.as_ref() {
            "always" => Self::Always,
            "and" => Self::And,
            "assign" => Self::Assign,
            "automatic" => Self::Automatic,
            "begin" => Self::Begin,
            "buf" => Self::Buf,
            "bufif0" => Self::Bufif0,
            "bufif1" => Self::Bufif1,
            "case" => Self::Case,
            "casex" => Self::Casex,
            "casez" => Self::Casez,
            "cell" => Self::Cell,
            "cmos" => Self::Cmos,
            "config" => Self::Config,
            "deassign" => Self::Deassign,
            "default" => Self::Default,
            "defparam" => Self::Defparam,
            "design" => Self::Design,
            "disable" => Self::Disable,
            "edge" => Self::Edge,
            "else" => Self::Else,
            "end" => Self::End,
            "endcase" => Self::Endcase,
            "endconfig" => Self::Endconfig,
            "endfunction" => Self::Endfunction,
            "endgenerate" => Self::Endgenerate,
            "endmodule" => Self::Endmodule,
            "endprimitive" => Self::Endprimitive,
            "endspecify" => Self::Endspecify,
            "endtable" => Self::Endtable,
            "endtask" => Self::Endtask,
            "event" => Self::Event,
            "for" => Self::For,
            "force" => Self::Force,
            "forever" => Self::Forever,
            "fork" => Self::Fork,
            "function" => Self::Function,
            "generate" => Self::Generate,
            "genvar" => Self::Genvar,
            "highz0" => Self::Highz0,
            "highz1" => Self::Highz1,
            "if" => Self::If,
            "ifnone" => Self::Ifnone,
            "incdir" => Self::Incdir,
            "include" => Self::Include,
            "initial" => Self::Initial,
            "inout" => Self::Inout,
            "input" => Self::Input,
            "instance" => Self::Instance,
            "integer" => Self::Integer,
            "join" => Self::Join,
            "large" => Self::Large,
            "liblist" => Self::Liblist,
            "library" => Self::Library,
            "localparam" => Self::Localparam,
            "macromodule" => Self::Macromodule,
            "medium" => Self::Medium,
            "module" => Self::Module,
            "nand" => Self::Nand,
            "negedge" => Self::Negedge,
            "nmos" => Self::Nmos,
            "nor" => Self::Nor,
            "noshowcancelled" => Self::Noshowcancelled,
            "not" => Self::Not,
            "notif0" => Self::Notif0,
            "notif1" => Self::Notif1,
            "or" => Self::Or,
            "output" => Self::Output,
            "parameter" => Self::Parameter,
            "pmos" => Self::Pmos,
            "posedge" => Self::Posedge,
            "primitive" => Self::Primitive,
            "pull0" => Self::Pull0,
            "pull1" => Self::Pull1,
            "pulldown" => Self::Pulldown,
            "pullup" => Self::Pullup,
            "pulsestyle_onevent" => Self::PulsestyleOnevent,
            "pulsestyle_ondetect" => Self::PulsestyleOndetect,
            "rcmos" => Self::Rcmos,
            "real" => Self::Real,
            "realtime" => Self::Realtime,
            "reg" => Self::Reg,
            "release" => Self::Release,
            "repeat" => Self::Repeat,
            "rnmos" => Self::Rnmos,
            "rpmos" => Self::Rpmos,
            "rtran" => Self::Rtran,
            "rtranif0" => Self::Rtranif0,
            "rrtranif1" => Self::Rrtranif1,
            "scalared" => Self::Scalared,
            "showcancelled" => Self::Showcancelled,
            "signed" => Self::Signed,
            "small" => Self::Small,
            "specify" => Self::Specify,
            "specparam" => Self::Specparam,
            "strong0" => Self::Strong0,
            "strong1" => Self::Strong1,
            "supply0" => Self::Supply0,
            "supply1" => Self::Supply1,
            "table" => Self::Table,
            "task" => Self::Task,
            "time" => Self::Time,
            "tran" => Self::Tran,
            "tranif0" => Self::Tranif0,
            "tranif1" => Self::Tranif1,
            "tri" => Self::Tri,
            "tri0" => Self::Tri0,
            "tri1" => Self::Tri1,
            "triand" => Self::Triand,
            "trior" => Self::Trior,
            "trireg" => Self::Trireg,
            "unsigned" => Self::Unsigned,
            "use" => Self::Use,
            "uwire" => Self::Uwire,
            "vectored" => Self::Vectored,
            "wait" => Self::Wait,
            "wand" => Self::Wand,
            "weak0" => Self::Weak0,
            "weak1" => Self::Weak1,
            "while" => Self::While,
            "wire" => Self::Wire,
            "wor" => Self::Wor,
            "xnor" => Self::Xnor,
            "xor" => Self::Xor,
            _ => return None,
        })
    }

    fn as_str(&self) -> &str {
        match self {
            Self::Always => "always",
            Self::And => "and",
            Self::Assign => "assign",
            Self::Automatic => "automatic",
            Self::Begin => "begin",
            Self::Buf => "buf",
            Self::Bufif0 => "bufif0",
            Self::Bufif1 => "bufif1",
            Self::Case => "case",
            Self::Casex => "casex",
            Self::Casez => "casez",
            Self::Cell => "cell",
            Self::Cmos => "cmos",
            Self::Config => "config",
            Self::Deassign => "deassign",
            Self::Default => "default",
            Self::Defparam => "defparam",
            Self::Design => "design",
            Self::Disable => "disable",
            Self::Edge => "edge",
            Self::Else => "else",
            Self::End => "end",
            Self::Endcase => "endcase",
            Self::Endconfig => "endconfig",
            Self::Endfunction => "endfunction",
            Self::Endgenerate => "endgenerate",
            Self::Endmodule => "endmodule",
            Self::Endprimitive => "endprimitive",
            Self::Endspecify => "endspecify",
            Self::Endtable => "endtable",
            Self::Endtask => "endtask",
            Self::Event => "event",
            Self::For => "for",
            Self::Force => "force",
            Self::Forever => "forever",
            Self::Fork => "fork",
            Self::Function => "function",
            Self::Generate => "generate",
            Self::Genvar => "genvar",
            Self::Highz0 => "highz0",
            Self::Highz1 => "highz1",
            Self::If => "if",
            Self::Ifnone => "ifnone",
            Self::Incdir => "incdir",
            Self::Include => "include",
            Self::Initial => "initial",
            Self::Inout => "inout",
            Self::Input => "input",
            Self::Instance => "instance",
            Self::Integer => "integer",
            Self::Join => "join",
            Self::Large => "large",
            Self::Liblist => "liblist",
            Self::Library => "library",
            Self::Localparam => "localparam",
            Self::Macromodule => "macromodule",
            Self::Medium => "medium",
            Self::Module => "module",
            Self::Nand => "nand",
            Self::Negedge => "negedge",
            Self::Nmos => "nmos",
            Self::Nor => "nor",
            Self::Noshowcancelled => "noshowcancelled",
            Self::Not => "not",
            Self::Notif0 => "notif0",
            Self::Notif1 => "notif1",
            Self::Or => "or",
            Self::Output => "output",
            Self::Parameter => "parameter",
            Self::Pmos => "pmos",
            Self::Posedge => "posedge",
            Self::Primitive => "primitive",
            Self::Pull0 => "pull0",
            Self::Pull1 => "pull1",
            Self::Pulldown => "pulldown",
            Self::Pullup => "pullup",
            Self::PulsestyleOnevent => "pulsestyle_onevent",
            Self::PulsestyleOndetect => "pulsestyle_ondetect",
            Self::Rcmos => "rcmos",
            Self::Real => "real",
            Self::Realtime => "realtime",
            Self::Reg => "reg",
            Self::Release => "release",
            Self::Repeat => "repeat",
            Self::Rnmos => "rnmos",
            Self::Rpmos => "rpmos",
            Self::Rtran => "rtran",
            Self::Rtranif0 => "rtranif0",
            Self::Rrtranif1 => "rrtranif1",
            Self::Scalared => "scalared",
            Self::Showcancelled => "showcancelled",
            Self::Signed => "signed",
            Self::Small => "small",
            Self::Specify => "specify",
            Self::Specparam => "specparam",
            Self::Strong0 => "strong0",
            Self::Strong1 => "strong1",
            Self::Supply0 => "supply0",
            Self::Supply1 => "supply1",
            Self::Table => "table",
            Self::Task => "task",
            Self::Time => "time",
            Self::Tran => "tran",
            Self::Tranif0 => "tranif0",
            Self::Tranif1 => "tranif1",
            Self::Tri => "tri",
            Self::Tri0 => "tri0",
            Self::Tri1 => "tri1",
            Self::Triand => "triand",
            Self::Trior => "trior",
            Self::Trireg => "trireg",
            Self::Unsigned => "unsigned",
            Self::Use => "use",
            Self::Uwire => "uwire",
            Self::Vectored => "vectored",
            Self::Wait => "wait",
            Self::Wand => "wand",
            Self::Weak0 => "weak0",
            Self::Weak1 => "weak1",
            Self::While => "while",
            Self::Wire => "wire",
            Self::Wor => "wor",
            Self::Xnor => "xnor",
            Self::Xor => "xor",
        }
    }
}

impl Display for Keyword {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.as_str())
    }
}

impl ToColor for Keyword {
    fn to_color(&self) -> ColoredString {
        highlight::style::keyword(&self.to_string())
    }
}
